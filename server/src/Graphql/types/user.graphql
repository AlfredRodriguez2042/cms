type Query {
  User(id: ID): User!
  Users: [User!]
  Profile(id: ID): User!
  UsersOnline: [User!]
}

type User implements Node {
  id: ID!
  name: String!
  username: String!
  email: String!
  password: String @password(min: 10, max: 15)
  thumbnail: String
  active: Boolean!
  createdAt: ID!
  lastLoginAt: Date!
  status: String!
  roles: [Roles]! @auth(requires: admin)
  channels: [Channel]
  articles: [ArticleShort!]
  comments: [Comment!]
}

type UserShort implements Node {
  id: ID!
  username: String!
  thumbnail: String
  active: Boolean
  lastLoginAt: Date!
  channels: [Channel]
  roles: [Roles]!
}

type AuthPayload {
  token: String
  user: UserShort!
}

type Mutation {
  createUser(input: UserInput!): User!
  updateUser(input: UserUpdateInput!): User!
  deleteUser(id: ID): User!
  Login(input: LoginInput): AuthPayload!
  Logout(input: LogOutInput): Boolean
  checkLoggedIn: AuthPayload!
}

input UserInput {
  name: String!
  thumbnail: String
  username: String!
  email: String!
  password: String!
  roles: String
}

input UserUpdateInput {
  id: ID! # para buscarlo
  thumbnail: String
  username: String
  email: String
  password: String
  roles: String
}
input LogOutInput {
  id: ID!
  status: String!
}
input LoginInput {
  email: String!
  password: String!
}
