version: '3.7'
services:
  db:
    image: postgres:alpine
    container_name: mypostgres
    ports:
      - '5432'
    networks:
      - backend
    environment:
      POSTGRES_PASSWORD: '${POSTGRES_PASSWORD:-postgres}'
      POSTGRES_USER: '${POSTGRES_USER:-postgres}'
      POSTGRES_DB: '${POSTGRES_DB:-practica}'
      # POSTGRES_HOST_AUTH_METHOD: 'trust' no secure in production
    volumes:
      - ~/Escritorio/Docker/postgres/data:/var/lib/postgresql/data

  storage:
    image: redis:alpine
    container_name: myredis
    networks:
      - backend
    ports:
      - '6379'
    command: 'redis-server --appendonly yes --requirepass ${REDIS_SECRET}'
    volumes:
      - ~/Escritorio/Docker/redis/conf/redis.conf:/usr/local/etc/redis/redis.conf:ro
      - ~/Escritorio/Docker/redis/data:/data

  servernode:
    container_name: server
    build:
      context: ./server
      dockerfile: Dockerfile
    command: npm run dev
    networks:
      - backend
    ports:
      - 5500:5500
    volumes:
      - ./server:/app
    env_file:
      - .env
    environment:
      POSTGRES_HOST: db
      REDIS_HOST: storage
      POSTGRES_PASSWORD: '${POSTGRES_PASSWORD:-postgres}'
      POSTGRES_USER: '${POSTGRES_USER:-postgres}'
      POSTGRES_DB: '${POSTGRES_DB:-practica}'
    depends_on:
      - db
      - storage

  # netdata:
  #   image: netdata/netdata
  #   hostname: kuro.com # set to fqdn of host
  #   ports:
  #     - 19999:19999
  #   cap_add:
  #     - SYS_PTRACE
  #   security_opt:
  #     - apparmor:unconfined
  #   volumes:
  #     - /etc/passwd:/host/etc/passwd:ro
  #     - /etc/group:/host/etc/group:ro
  #     - /proc:/host/proc:ro # ro is Read Only
  #     - /sys:/host/sys:ro
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #   #   - netdata-etc:/etc/netdata
  #   depends_on:
  #     - servernode

networks:
  backend:
    external: true
    name: backend
    driver: bridge
